/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error;
import io.swagger.model.Product;
import io.swagger.model.Productresponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-11-01T17:51:33.126Z")

@Api(value = "product", description = "the product API")
@RequestMapping(value = "/v1")
public interface ProductApi {

    @ApiOperation(value = "Retreive product details based on the productId", nickname = "getProductGET", notes = "Get a Product by productId", response = Product.class, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Product.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class) })
    @RequestMapping(value = "/product/{productId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Product> getProductGET(@ApiParam(value = "",required=true) @PathVariable("productId") Integer productId);


    @ApiOperation(value = "Deletes a Product based on productId", nickname = "productDELETE", notes = "Delete a Product by productId", tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = ""),
        @ApiResponse(code = 404, message = "TODO: Add error message", response = Error.class) })
    @RequestMapping(value = "/product/{productId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> productDELETE(@ApiParam(value = "",required=true) @PathVariable("productId") String productId);


    @ApiOperation(value = "Get all the products", nickname = "productGET", notes = "Returns all the products in the system", response = Product.class, responseContainer = "List", tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Product.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "", response = Error.class) })
    @RequestMapping(value = "/product",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Product>> productGET(@ApiParam(value = "returns products based on product short name") @Valid @RequestParam(value = "productShortName", required = false) String productShortName,@ApiParam(value = "returns products based on category") @Valid @RequestParam(value = "productCategoryName", required = false) String productCategoryName);


    @ApiOperation(value = "Create a new Product", nickname = "productPOST", notes = "Creates a new product using the JSON payload provided in the body of the post request.", response = Productresponse.class, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "", response = Productresponse.class),
        @ApiResponse(code = 500, message = "", response = Error.class) })
    @RequestMapping(value = "/product",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Productresponse> productPOST(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Product body);


    @ApiOperation(value = "Update a product details based on productId", nickname = "productPUT", notes = "Update a Product by productId", response = Productresponse.class, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "", response = Productresponse.class),
        @ApiResponse(code = 404, message = "TODO: Add error message", response = Error.class) })
    @RequestMapping(value = "/product/{productId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Productresponse> productPUT(@ApiParam(value = "",required=true) @PathVariable("productId") String productId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Product body);

}
