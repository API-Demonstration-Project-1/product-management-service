/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Category;
import io.swagger.model.Categoryresponse;
import io.swagger.model.Error;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-11-01T17:51:33.126Z")

@Api(value = "Category", description = "the Category API")
@RequestMapping(value = "/v1")
public interface CategoryApi {

    @ApiOperation(value = "CategoryByCategoryId_DELETE", nickname = "categoryByCategoryIdDELETE", notes = "Delete a Category by CategoryId", tags={ "Category", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = ""),
        @ApiResponse(code = 404, message = "TODO: Add error message", response = Error.class) })
    @RequestMapping(value = "/Category/{CategoryId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> categoryByCategoryIdDELETE(@ApiParam(value = "",required=true) @PathVariable("CategoryId") String categoryId);


    @ApiOperation(value = "CategoryByCategoryId_GET", nickname = "categoryByCategoryIdGET", notes = "Get a Category by CategoryId", response = Category.class, tags={ "Category", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Category.class),
        @ApiResponse(code = 404, message = "TODO: Add error message", response = Error.class) })
    @RequestMapping(value = "/Category/{CategoryId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Category> categoryByCategoryIdGET(@ApiParam(value = "",required=true) @PathVariable("CategoryId") String categoryId);


    @ApiOperation(value = "CategoryByCategoryId_POST", nickname = "categoryByCategoryIdPOST", notes = "Category using Username & Password", response = Categoryresponse.class, tags={ "Category", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "", response = Categoryresponse.class),
        @ApiResponse(code = 400, message = "TODO: Add error message", response = Error.class) })
    @RequestMapping(value = "/Category/{CategoryId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Categoryresponse> categoryByCategoryIdPOST(@ApiParam(value = "",required=true) @PathVariable("CategoryId") String categoryId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Category body);


    @ApiOperation(value = "CategoryByCategoryId_PUT", nickname = "categoryByCategoryIdPUT", notes = "Update a Category by CategoryId", response = Category.class, tags={ "Category", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Category.class),
        @ApiResponse(code = 404, message = "TODO: Add error message", response = Error.class) })
    @RequestMapping(value = "/Category/{CategoryId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Category> categoryByCategoryIdPUT(@ApiParam(value = "",required=true) @PathVariable("CategoryId") String categoryId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Category body);


    @ApiOperation(value = "Category_GET", nickname = "categoryGET", notes = "Get a list of Category", response = Category.class, responseContainer = "List", tags={ "Category", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Category.class, responseContainer = "List") })
    @RequestMapping(value = "/Category",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Category>> categoryGET(@ApiParam(value = "Get Category info for a given Tenant Name") @Valid @RequestParam(value = "tenantName", required = false) String tenantName,@ApiParam(value = "Get all Category info based on Category status") @Valid @RequestParam(value = "CategoryStatus", required = false) String categoryStatus,@ApiParam(value = "Get all Category info based on Category method") @Valid @RequestParam(value = "CategoryMethod", required = false) String categoryMethod);


    @ApiOperation(value = "Category_POST", nickname = "categoryPOST", notes = "Add a new Category", response = Categoryresponse.class, tags={ "Category", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "", response = Categoryresponse.class) })
    @RequestMapping(value = "/Category",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Categoryresponse> categoryPOST(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Category body);

}
