package com.proarchs.product.api.autogenerated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.proarchs.product.model.Data1;
import com.proarchs.product.model.Error;
import com.proarchs.product.model.Product;
import com.proarchs.product.model.ProductListResponse;
import com.proarchs.product.model.ProductResponse;
import com.proarchs.product.model.Productresponse1;
import com.proarchs.product.service.ProductService;
import com.proarchs.product.util.ResponsePreparator;

import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.constraints.*;
import javax.validation.Valid;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-11-02T06:47:09.808Z")

@Controller
public class ProductApiController implements ProductApi {

    private static final Logger log = LoggerFactory.getLogger(ProductApiController.class);

    private final ObjectMapper objectMapper;
    
    @Autowired
    private ProductService productService;
    private final HttpServletRequest request;

    @org.springframework.beans.factory.annotation.Autowired
    public ProductApiController(ObjectMapper objectMapper, HttpServletRequest request) {
        this.objectMapper = objectMapper;
        this.request = request;
    }

    public ResponseEntity<String> productByProductIdDELETE(@ApiParam(value = "",required=true) @PathVariable("productId") Integer productId) {
        if(productId!=null) {
            try {
                productService.delete(productId);
                ProductResponse deleteResponse = new ProductResponse().data(null).message("Product has been deleted").errorCode(null).success(true);
                String deleteResponseString = ResponsePreparator.serializeResponse(deleteResponse);
                return new ResponseEntity<String>(deleteResponseString, HttpStatus.OK);
                }catch(java.util.NoSuchElementException noValuePresent) {
        			return errorResponse("Product could not be found", HttpStatus.NOT_FOUND);
        		}
        }
		return errorResponse("Please provide appropriate productId in the URI", HttpStatus.BAD_REQUEST);
    }

    public ResponseEntity<String> productByProductIdGET(@ApiParam(value = "",required=true) @PathVariable("productId") Integer productId) {
    	if(productId!=null) {
    		try {
    		    Product product = productService.get(productId);
    			ProductResponse productResponse = new ProductResponse().success(true).message("Product Retreived Successfully").data(product).errorCode(null);
    			String responseBody = ResponsePreparator.serializeResponse(productResponse);
    			return new ResponseEntity<String>(responseBody, HttpStatus.OK);
    		}catch(java.util.NoSuchElementException noValuePresent) {
    			return errorResponse("Product could not be found", HttpStatus.NOT_FOUND);
    		}
    		catch(Exception e) {
    			log.info("Exception : ", e);
    			return errorResponse("Internal Server Error", HttpStatus.INTERNAL_SERVER_ERROR);
    		}
    	}
    		return errorResponse("Please provide appropriate productId in the URI", HttpStatus.BAD_REQUEST);
    }

    public ResponseEntity<String> productByProductIdPOST(@ApiParam(value = "",required=true) @PathVariable("productId") Integer productId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Product body) {
    	if(productId!=null) {
    		try {
    		    Product dbObject = productService.get(productId); //retreive from db. exception is thrown if not present
    		    
    			dbObject.productAvailable(body.getProductAvailable());
    			if(body.getProductShortName()!=null) dbObject.setProductShortName(body.getProductShortName());
    			if(body.getProductLongName()!=null) dbObject.setProductLongName(body.getProductLongName());
    			if(body.getProductDescription()!=null) dbObject.setProductDescription(body.getProductDescription());
    			//if(body.getProductSku()!=null) dbObject.setProductSku(body.getProductSku());
    			if(body.getProductCategoryId()!=null) dbObject.setProductCategoryId(body.getProductCategoryId());
    			if(body.getProductUnitPrice()!=null) dbObject.setProductUnitPrice(body.getProductUnitPrice());
    			if(body.getProductAvailable()!=null) dbObject.setProductAvailable(body.getProductAvailable());
    			if(body.getProductTypeId()!=null) dbObject.setProductTypeId(body.getProductTypeId());
    			if(body.getProductImagesId()!=null) dbObject.setProductImagesId(body.getProductImagesId());
    			dbObject = productService.save(dbObject);//save updated dbObject back into db. exception is thrown if anything  goes wrong.
    			
    			String responseBody = ResponsePreparator.serializeResponse(dbObject);
    			return new ResponseEntity<String>(responseBody, HttpStatus.CREATED);
    		}catch(java.util.NoSuchElementException noValuePresent) {
    			return errorResponse("Product could not be found", HttpStatus.NOT_FOUND);
    		}
    		catch(Exception e) {
    			log.info("Exception : ", e);
    			return errorResponse("Internal Server Error", HttpStatus.INTERNAL_SERVER_ERROR);
    		}
    	}
    		return errorResponse("Please provide appropriate productId in the URI", HttpStatus.BAD_REQUEST);
    }

    //public ResponseEntity<String> productByProductIdPUT(@ApiParam(value = "",required=true) @PathVariable("productId") Integer productId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Product body) {
    public ResponseEntity<String> productByProductIdPUT(@ApiParam(value = "",required=true) @PathVariable("productId") Integer productId,@ApiParam(value = "" ,required=true ) @RequestBody Product body) {
    	if(productId!=null) {
    		try {
    		    Product dbObject = productService.get(productId); //retreive from db. exception is thrown if not present
    		    
    			dbObject.productAvailable(body.getProductAvailable());
    			if(body.getProductShortName()!=null) dbObject.setProductShortName(body.getProductShortName());
    			if(body.getProductLongName()!=null) dbObject.setProductLongName(body.getProductLongName());
    			if(body.getProductDescription()!=null) dbObject.setProductDescription(body.getProductDescription());
    			//if(body.getProductSku()!=null) dbObject.setProductSku(body.getProductSku());
    			if(body.getProductCategoryId()!=null) dbObject.setProductCategoryId(body.getProductCategoryId());
    			if(body.getProductUnitPrice()!=null) dbObject.setProductUnitPrice(body.getProductUnitPrice());
    			if(body.getProductAvailable()!=null) dbObject.setProductAvailable(body.getProductAvailable());
    			if(body.getProductTypeId()!=null) dbObject.setProductTypeId(body.getProductTypeId());
    			if(body.getProductImagesId()!=null) dbObject.setProductImagesId(body.getProductImagesId());
    			dbObject = productService.save(dbObject);//save updated dbObject back into db. exceptio is thrown if anything  goes wrong.
    			
    			String responseBody = ResponsePreparator.serializeResponse(dbObject);
    			return new ResponseEntity<String>(responseBody, HttpStatus.CREATED);
    		}catch(java.util.NoSuchElementException noValuePresent) {
    			return errorResponse("Product could not be found", HttpStatus.NOT_FOUND);
    		}
    		catch(Exception e) {
    			log.info("Exception : ", e);
    			return errorResponse("Internal Server Error", HttpStatus.INTERNAL_SERVER_ERROR);
    		}
    	}
    		return errorResponse("Please provide appropriate productId in the URI", HttpStatus.BAD_REQUEST);
    }

    public ResponseEntity<String> productGET(@ApiParam(value = "Get List of Tenant Info based on a given Tenant Name") @Valid @RequestParam(value = "productName", required = false) String productName,@ApiParam(value = "Get List of Tenant Info based on a given Tenant Email") @Valid @RequestParam(value = "productCategory", required = false) String productCategory) {
    	
      if(productName!=null) {
    	  //prepare a SQL query
    	  //run it and map the results and return
      }
      if(productCategory!=null) {
    	  //prepare a SQL query
    	  //run it and map the results and return
      }
      else {
      
    		try {
    		    List<Product> productList = (List<Product>) productService.get();
    			ProductListResponse productListResponse = new ProductListResponse().success(true).message("Product Retreived Successfully").data(productList).errorCode(null);
    			String responseBody = ResponsePreparator.serializeResponse(productListResponse);
    			return new ResponseEntity<String>(responseBody, HttpStatus.OK);
    		}catch(java.util.NoSuchElementException noValuePresent) {
    			return errorResponse("Product could not be found", HttpStatus.NOT_FOUND);
    		}
    		catch(Exception e) {
    			log.info("Exception : ", e);
    			return errorResponse("Internal Server Error", HttpStatus.INTERNAL_SERVER_ERROR);
    		}
    	}
      		log.error("get all threw error");
    		return errorResponse("Please provide appropriate productId in the URI", HttpStatus.INTERNAL_SERVER_ERROR);
    }

    public ResponseEntity<String> productPOST(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Product body) {
            Product product = productService.save(body);
			Productresponse1 productResponse = new Productresponse1()
					.message("Product created succesfully")
					.success(true).
					errorCode(null)
					.data(new Data1().id(product.getProductId()));
			String productResponseBody = ResponsePreparator.serializeResponse(productResponse);
			return new ResponseEntity<String>(productResponseBody, HttpStatus.CREATED);
    }

    
	private ResponseEntity<String> errorResponse(String message, HttpStatus status) {
		ProductResponse errorResponse = new ProductResponse().success(false).message(message).data(null).errorCode(status.value());
		String responseBody = ResponsePreparator.serializeResponse(errorResponse);
		return new ResponseEntity<String>(responseBody, HttpStatus.NOT_FOUND);
	}
}
